datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
  ESSAY
}

enum TestType {
  PRACTICE
  QUIZ
  MIDTERM
  FINAL
  ASSIGNMENT
}

model Question {
  id              String         @id @default(uuid())
  type            QuestionType
  text            String
  explanation     String?
  // Tham chiếu đến service Course
  courseId        String?
  chapterId       String?
  lessonId        String?
  options         AnswerOption[]
  correctAnswers  CorrectAnswer[]
  testQuestions   TestQuestion[]
  userAnswers     UserAnswer[]
  scoreDetails    ScoreDetail[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([courseId])
  @@index([chapterId])
  @@index([lessonId])
}

model Test {
  id            String         @id @default(uuid())
  title         String
  description   String?
  // Tham chiếu đến service Course
  courseId      String?
  chapterId     String?
  lessonId      String?
  // Metadata
  duration      Int?
  maxScore      Float?
  testType      TestType       @default(PRACTICE)
  testQuestions TestQuestion[]
  attempts      TestAttempt[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([courseId])
  @@index([chapterId])
  @@index([lessonId])
  @@unique([courseId, chapterId, lessonId, title])
}

model TestAttempt {
  id          String        @id @default(uuid())
  userId      String
  test        Test          @relation(fields: [testId], references: [id])
  testId      String
  answers     UserAnswer[]
  scoreDetails ScoreDetail[]
  totalScore  Float?
  startedAt   DateTime
  submittedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model AnswerOption {
  id          String   @id @default(uuid())
  question    Question @relation(fields: [questionId], references: [id])
  questionId  String
  content     String
  isCorrect   Boolean
  order       Int
}
model CorrectAnswer {
  id          String   @id @default(uuid())
  question    Question @relation(fields: [questionId], references: [id])
  questionId  String
  answer      String
}
model TestQuestion {
  id          String   @id @default(uuid())
  test        Test     @relation(fields: [testId], references: [id])
  testId      String
  question    Question @relation(fields: [questionId], references: [id])
  questionId  String
  maxScore    Float
  weight      Float    @default(1.0)
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([testId, questionId])
}
model UserAnswer {
  id          String      @id @default(uuid())
  attempt     TestAttempt @relation(fields: [attemptId], references: [id])
  attemptId   String
  question    Question    @relation(fields: [questionId], references: [id])
  questionId  String
  answerData  Json
  isGraded    Boolean     @default(false)
  score       Float?
  feedback    String?
  submittedAt DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([attemptId, questionId])
}

model ScoreDetail {
  id          String      @id @default(uuid())
  attempt     TestAttempt @relation(fields: [attemptId], references: [id])
  attemptId   String
  question    Question    @relation(fields: [questionId], references: [id])
  questionId  String
  earnedScore Float
  feedback    String?
  createdAt   DateTime    @default(now())
}