generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Question {
  @@map("questions")
  id               String             @id @default(uuid())
  questionSetterId String?            @map("question_setter_id")
  type             QuestionType       @default(SINGLE_CHOICE) @map("question_type")
  content          Json
  explanation      String?
  courseId         String?            @map("course_id")
  chapterId        String?            @map("chapter_id")
  lessonId         String?            @map("lesson_id")
  options          AnswerOption[]     @relation(name: "AnswerOptionToQuestion")
  testQuestions    TestQuestion[]     @relation(name: "QuestionToTestQuestion")
  referenceAnswers ReferenceAnswer?   @relation(name: "QuestionToReferenceAnswer")
  userAnswers      UserAnswer[]       @relation(name: "QuestionToUserAnswer")
  scoreDetails     ScoreDetail[]      @relation(name: "QuestionToScoreDetail")
  difficulty       QuestionDifficulty @default(REMEMBERING) @map("difficulty")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")

  @@index([courseId])
  @@index([chapterId])
  @@index([lessonId])
}

model ReferenceAnswer {
  @@map("reference_answers")
  id         String   @id @default(uuid())
  question   Question @relation(name: "QuestionToReferenceAnswer", fields: [questionId], references: [id])
  questionId String   @unique @map("question_id")
  content    Json
  notes      String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
}

model Test {
  @@map("tests")
  id               String         @id @default(uuid())
  testCreator      String?        @map("test_creator")
  title            String
  description      String?
  courseId         String?        @map("course_id")
  chapterId        String?        @map("chapter_id")
  lessonId         String?        @map("lesson_id")
  duration         Int?
  maxScore         Float          @default(100) @map("max_score")
  testType         TestType       @default(PRACTICE) @map("test_type")
  shuffleQuestions Boolean        @default(false) @map("shuffle_questions")
  maxAttempts      Int?           @default(1) @map("max_attempts")
  cooldownPeriod   Int?           @map("cooldown_period")
  scoringPolicy    ScoringPolicy  @default(HIGHEST) @map("scoring_policy")
  testQuestions    TestQuestion[] @relation(name: "TestToTestQuestion")
  questionOrder    Json?          @map("question_order")
  attempts         TestAttempt[]  @relation(name: "TestToTestAttempt")
  allowReview      Boolean        @default(false) @map("allow_review")
  testStart        DateTime       @default(now()) @map("test_start")
  testEnd          DateTime?      @map("test_end")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")

  @@unique([courseId, chapterId, lessonId, title])
  @@index([courseId])
  @@index([chapterId])
  @@index([lessonId])
}

model TestAttempt  {
  @@map("test_attempts")
  id            String        @id @default(uuid())
  testTakerId   String?       @map("test_taker_id")
  test          Test          @relation(name: "TestToTestAttempt", fields: [testId], references: [id])
  testId        String        @map("test_id")
  attemptNumber Int           @default(1)
  questionOrder Json?         @map("question_order")
  optionOrders  Json?         @map("option_orders")
  answers       UserAnswer[]  @relation(name: "TestAttemptToUserAnswer")
  scoreDetails  ScoreDetail[] @relation(name: "ScoreDetailToTestAttempt")
  totalScore    Float?        @map("total_score")
  startedAt     DateTime      @default(now()) @map("started_at")
  submittedAt   DateTime?     @map("submitted_at")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
}

model AnswerOption {
  @@map("answer_options")
  id         String   @id @default(uuid())
  question   Question @relation(name: "AnswerOptionToQuestion", fields: [questionId], references: [id])
  questionId String   @map("question_id")
  content    Json
  isCorrect  Boolean  @map("is_correct")
  order      Int
}

model TestQuestion {
  @@map("test_questions")
  id         String   @id @default(uuid())
  test       Test     @relation(name: "TestToTestQuestion", fields: [testId], references: [id])
  testId     String   @map("test_id")
  question   Question @relation(name: "QuestionToTestQuestion", fields: [questionId], references: [id])
  questionId String   @map("question_id")
  maxScore   Float    @default(1) @map("max_score")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([testId, questionId])
}

model UserAnswer {
  @@map("user_answers")
  id          String      @id @default(uuid())
  attempt     TestAttempt @relation(name: "TestAttemptToUserAnswer", fields: [attemptId], references: [id])
  attemptId   String      @map("attempt_id")
  question    Question    @relation(name: "QuestionToUserAnswer", fields: [questionId], references: [id])
  questionId  String      @map("question_id")
  answerData  Json        @map("answer_data")
  isGraded    Boolean     @default(false)
  score       Float?
  feedback    String?
  submittedAt DateTime    @default(now()) @map("submitted_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@unique([attemptId, questionId])
}

model ScoreDetail {
  @@map("score_details")
  id          String      @id @default(uuid())
  attempt     TestAttempt @relation(name: "ScoreDetailToTestAttempt", fields: [attemptId], references: [id])
  attemptId   String      @map("attempt_id")
  question    Question    @relation(name: "QuestionToScoreDetail", fields: [questionId], references: [id])
  questionId  String      @map("question_id")
  earnedScore Float       @map("earned_score")
  feedback    String?
  createdAt   DateTime    @default(now()) @map("created_at")
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
  ESSAY
}

enum TestType {
  PRACTICE
  QUIZ
  FINAL
  ASSIGNMENT
}

enum ScoringPolicy {
  HIGHEST
  AVERAGE
  LATEST
}

enum QuestionDifficulty {
  REMEMBERING
  UNDERSTANDING
  APPLYING
  ANALYZING
  EVALUATING
  CREATING
}
